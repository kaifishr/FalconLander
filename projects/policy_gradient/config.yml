###########################################################################
# Configuration for (asynchronous) Policy Gradient Reinforcement Learning #
###########################################################################

random_seed: 41

# Policy Gradient
optimizer:
  num_boosters: 4
  num_simulation_steps: 200    # Length of episode.
  num_thrust_levels: 3        # Thrust levels of engines. 
  num_thrust_angles: 3        # Thrust angles of engines.
  learning_rate: 0.0005
  batch_size: 128
  gamma: 1.0                 # Discount rate.
  lib: "torch"                # Fix.
  net: "policy_gradient"      # Fix.

trainer:
  num_episodes: -1  # -1 for infinite generations or positive integer

# Simulation environment 
env:

  friction: 5.0

  gravity: # [m / s^2]
    x: 0.0
    y: -9.81

  domain: # [m]
    x_min: -150.0
    x_max: 150.0
    y_max: 450.0
    y_min: -10.0

  landing_pad:
    position: # [m]
      x: -100.0
      y: 0.0

  landing:
    v_max: # [m / s]
      x: 5.0
      y: -5.0

  booster:
    # Fix rotation for faster learning.
    fixed_rotation: true

    stress:
      max_angle: 10  # [deg]
      max_angular_velocity: 90  # [deg / s]

    init:
      position: # [m]
        x: 50.0
        y: 250.0
      linear_velocity: # [m / s]
        x: 0.0
        y: -30.0
      angular_velocity: 0.0   # [deg / s], counterclockwise for positive numbers
      angle: 0.0              # [deg] counterclockwise

    engine:
      # Merlin engine. 854 kN thrust at sea level. Gimbal angle, about ~15 degrees.
      main: 
        max_force: 854000.0  # [N]
        max_angle: 15.0      # [deg]
      # Cold gas propulsion system.
      cold_gas:
        max_force: 50000.0   # [N]
        max_angle: 10.0      # [deg]

    noise:
      # Specifies standard deviation of Gaussian noise added to agents initial state.
      is_activated: true
      # Specifies whether every agent gets the same starting noise: "identical" or "different"
      type: "different"
      position: # [m]
        x: 10.0
        y: 10.0
      linear_velocity: # [m / s]
        x: 1.0
        y: 1.0
      angular_velocity: 0.0  # [deg / s]
      angle: 0.0  # [deg]

    neural_network: # model
      num_dim_in: 6       # Position, linear velocity, angular velocity, angle.
      num_dim_hidden: 64
      num_hidden_layers: 1

framework:
  screen:
    width: 640
    height: 1024
  target_fps: 60
  velocity_iterations: 10   # Number of iterations to compute next velocity.
  position_iterations: 10   # Number of iterations to compute next position.

renderer:
  scale_force: 0.0001
  screen:
    shift:
      x: -0.5
      y: -0.05
  ppm: 2     # Pixels per meter (zoom)

# Directory to save the frames to create a video.
dirs:
  frames: "frames"

# Save or load pre-trained neural network.
checkpoints:
  load_model: false
  save_model: false
  every_num_episodes: 1000
  model_path: "weights"
  model_name: ""